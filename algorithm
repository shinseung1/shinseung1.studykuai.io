
자료구조 정리 


배열기반 stack 구현 

class Node {
	int data; //데이터의 값
	Node(int data);
	Node();
	~Node();
}

//node 클래스 

Node::Node(int data){
	this->data  = data;
}

Node::~Node(){
	--->소멸자<---
}

class stack{
	int cpapcity;
	int top;
	Node **[Nodes];

	void Stack(int cpapcity);
	void push();
	int pop();
	int getsize();
}


Stack::Stack(int cpapcity){
	this->Node = new Node*[cpapcity];
	this->cpapcity = capacity;
	this->top = top;
}

Stack::push(int data){
	this->node[this->top++] = new Node(data);

}
Stack::pop(){
	int data = this->Node[--(this->top)]->data;
	return data;
}

Stack::isempty(){
	return this->top== 0;
}

Stack::getsize(Node node){
	return this->top-1;

}


LinkedList 기반 

class Node{
	int data ;
	Node *prevNode;

	Node(int data);
	~Node();

};

Node::Node(int data){
	this->data = data;
}
Node::~Node(){
	---소멸자---
}


class Stack{
	public :
	Node* topNode; //linked list 이므로 
	int len; 

	Stack();
	~Stack();

	void push(int data);
	int pop();

	int getlen;
};

Stack::Stack(){
	this->topNode = NULL;
	this->len = 0; 
}

Stack::push(int data){
	if(this->topNode = NULL){//비어있을 떄 
		this->topNode = new Node(data);
}else{
	Node * old = this->topNode;
	this->topNode = new Node(data);
	this->topNode->prevNode = old; 

}
length++;

}

Stack::pop(){
	if(this->topNode = NULL){
		error
}
else{
	 int data= this->topNode->data;
	 this->topNode =  this->topNode->prevNode;
len --;
}
return data;



linkedList 기반 queue 구현

class queue {
	private :
	struct Data{
		T data;
		Data * next;
		Data(Data * next = null  , T data = 0)  : next(next),  data(data){}
	};
	Data * tail;
	Data * start;



	public :
	queue(){
		tail = new Data();
		start = new Data();
		start -> next = tail;
		tail-> next = tail;

	}
	~queue(){
		while (!Empty()){
			Data * tmp = start;
			start = start ->next;
			if(start =NULL) return;
			delete tmp;

		}
	} 

	void push(T new_data){
		Data * tmp = start;

		while (tmp->next ! = tail){
			tmp = tmp->next;

		}
		tmp->data = new_data->data;
		tmp->next = new Data();
		tmp -> next->next = tail;

	}
	T pop(){

		if(Empty) return 0;
		T result  = start->data;
		Data * tmp = start;
		start = start->next;
		return result;
	
	}

}


이진 탐색 tree 구현

#include <iostream>
#define null 0
using namespace std;
template <typename T>
class Tree;
template <typename T>
class TreeNode {
    friend class Tree<T>;
private:
    T data;
    TreeNode* left;
    TreeNode* right;
public:
    TreeNode(T data = 0, TreeNode* left = null, TreeNode* right = null) {
        this->data = data;
        this->left = left;
        this->right = right;
    }
    friend ostream& operator<<(ostream& os, const TreeNode<T>& node) {
        os << "[data] " << node.data << endl;
        if (node.left != null) {
            os << "[left] " << node.left->data << endl;
        }
        if (node.right != null) {
            os << "[right] " << node.right->data << endl;
        }
        return os;
    }
};
template <typename T>
class Tree {
private:
    TreeNode<T>* root;
public:
    Tree(T data = 0) {
        root = new TreeNode<T>(data);
    }
    // Tree 만들기
    void buildSearchTree() {
        insertNode(new TreeNode<int>(3));
        insertNode(new TreeNode<int>(10));
        insertNode(new TreeNode<int>(14));
        insertNode(new TreeNode<int>(2));
        insertNode(new TreeNode<int>(5));
        insertNode(new TreeNode<int>(11));
        insertNode(new TreeNode<int>(16));
    }
    void insertNode(TreeNode<T>* node) {
        // 중복이 없을 때
        if (search(root, node->data) == null) {
            TreeNode<T>* parent = null;
            TreeNode<T>* current = root;
            // 작으면 왼쪽, 크면 오른쪽으로 이동,
            // 새 노드의 부모가 정해짐
            while (current != null) {
                parent = current;
                if (node->data < parent->data) {
                    current = current->left;
                }
                else {
                    current = current->right;
                }
            }
            if (node->data < parent->data) {
                parent->left = node;
            }
            else {
                parent->right = node;
            }
            cout << "Inserted " << node->data << endl;
        }
    }
    TreeNode<T>* getRoot() {
        return root;
    }
    void preorder(TreeNode<T>* current) {
        if (current != null) {
            visit(current);
            preorder(current->left);
            preorder(current->right);
        }
    }
    void visit(TreeNode<T>* current) {
        cout << current->data << " ";
    }
    TreeNode<T>* search(TreeNode<T>* current, T data) {
        if (current == null) return null;
        if (data == current->data) {
            return current;
        }
        else if (data < current->data) {
            search(current->left, data);
        }
        else {
            search(current->right, data);
        }
    }
};
int main() {
    Tree<int> tree(8);
    tree.buildSearchTree();
    // 만들어진 Tree 출력하기
    // 8 3 2 5 10 14 11 16
    cout << "Preorder >> ";
    tree.preorder(tree.getRoot());
    cout << endl;
    // Tree에 4 넣고, 확인
    tree.insertNode(new TreeNode<int>(4));
    cout << "Preorder >> ";
    tree.preorder(tree.getRoot());
    cout << endl;
    // Tree에서 노드 찾기
    int number;
    cout << "Input number to search >> ";
    cin >> number;
    TreeNode<int>* found = tree.search(tree.getRoot(), number);
    if (found != null) {
        cout << "Found node." << endl;
        cout << *found;
    }
    else {
        cout << "Not found node." << endl;
    }
    }
